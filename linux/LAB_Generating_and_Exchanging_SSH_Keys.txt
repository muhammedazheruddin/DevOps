Generating and Exchanging SSH Keys for Secure Access
Introduction
Understanding the creation and exchange of SSH keys is a key concept to grasp as a new system administrator. In this lab, we will generate keys on two systems using the ssh-keygen utility and learn how to exchange and verify the keys with a remote system using ssh-copy-id and associated key files on each. At the end of this lab, you will understand how to create secure keys for remote access, how to exchange them, and where to store them on each system involved in the chain.

Create the SSH Keys on Server 1 and Server 2
Create the Key on Server 1
In your terminal, log in to Server 1.
ssh cloud_user@<SERVER1_PUBLIC_IP>;
List the contents of the current directory.
ls -la
Change to the .ssh directory.
cd .ssh
List the contents of the .ssh directory.
ls -la
Generate a key for Server 1.
ssh-keygen
Press Enter at the next three prompts.
List the contents of the .ssh directory again.
ls -la
List the contents of the id_rsa.pub file.
cat id_rsa.pub
Copy the output of this command to your clipboard.
Create the Key on Server 2
Log in to Server 2.
ssh cloud_user@<SERVER2_PUBLIC_IP>;
Change to the .ssh directory.
List the contents of the .ssh directory.
ls -la
Install the nano text editor.
sudo yum install nano
Enter your password at the prompt.
Open the authorized_keys file in nano.
nano authorized_keys
Add the key we just generated to the file.
Press Ctrl + X.
Press Y** then **Enter to save the changes.
Exchange the SSH Keys between Server 1 and Server 2
In your Server 2 terminal window, create a new key.
ssh-keygen
Press Enter for the next three prompts.
List the contents of the current directory.
ls -la
List the contents of the id_rsa.pub file.
cat id_rsa.pub
Copy the output of this command to your clipboard.
Type exit to log out of Server 2.
Install nano.
sudo yum install nano
Type y to continue.
List the contents of the current directory.
ls -la
Open the authorized_keys file in nano.
nano authorized_keys
Add the key we just generated to the file.
Press Ctrl + X.
Press Y** then **Enter to save the changes.
Test the Configuration
Attempt to log in to Server 2 from Server 1 without a password.
ssh cloud_user@<SERVER2PUBLIC_IP>; 
Attempt to log in to Server 1 from Server 2 without a password.
ssh cloud_user@<SERVER1PUBLIC_IP>; 
Conclusion
Congratulations, you've successfully completed this hands-on lab!

Additional Information and Resources
The development team in your organization is setting up their new development servers in preparation for the creation of a new web-based API. They are going to be creating configurations, copying files, etc. between two servers using a single service account.

You have been provided with credentials and connectivity information to those two new server instances. The service account they wish to use is the cloud_user account that you were provided. Following company security policy, a complex password has been set that is making periodic connections, copies, and service configurations hard for the team. They have asked you to simplify the process and create a trust for the service account between the two systems.

To make the trust between the two systems, you have determined the easiest method for doing so while maintaining security would be to use SSH keys and exchange them between the systems. You will need to create keys on both servers for the cloud_user service account and then exchange each server's account key with the other. This will facilitate connections from one system to the other and the reverse, regardless of the initiating system. Once you verify each user can log in from one server to the other, you can turn them back over to your team for use.
