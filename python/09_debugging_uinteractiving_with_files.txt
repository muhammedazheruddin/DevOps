There are some core actions that we need to understand how to do in any programming language, in order to be very productive. One of these actions is interacting with files. In this lesson, we'll learn how to read from and write to files, and we'll take a look at how bytes can be represented in code.

Documentation For This Video
The open function
The file object
The io module
Bytes Objects
Files as Objects
One of the beautiful aspects of working in an object-oriented programming language is that we can represent concepts as objects with functionality. Files are a great use case for this. Python gives us the file object (or concept, really). These objects provide us a few things:

A read method to access the underlying data in the file
A write method to place data into the underlying file
To test this out, we're going to create a simple text file with some names it in, and then read and modify it to see what we can learn.

Opening a File
The first step to interacting with a file is to "open" it, and in Python we'll use the open function. This function takes two main arguments:

file - The path to the file on disk (or where you'd like it to create it)
mode - How you would like to interact with the file
The file argument is pretty simple, but the mode argument has a variety of options that all work a little differently:

'r' - Opens the file for reading, which is the default mode
'w' - Opens the file for writing, while removing the existing content (truncating the file)
'x' - Opens the file to create it, failing if the file already exists
'a' - Opens the file for writing without truncating, appending any new writes to the end of the file
'b' - Opens the file in binary mode, in which the file expects to write and return bytes objects
't' - Opens the file in text mode, the default mode, where the object expects to write and return strings
'+' - Opens the file for reading and writing
These modes can be used in combination, so w+b is a valid mode saying that we want to read and write with bytes, and with the existing file being truncated (from the w).

Let's create a new script called using_files.py, and we'll start interacting with a file containing some names. The file doesn't exist yet, but if it did, we'd like to truncate it and prepare to write to it.

~/learning_python/using_files.py

my_file = open('xmen.txt', 'w+')
Now we have a new file object that we can write to.

Writing to the File
Before we can read from our file we need it to have some content. There are a few primary methods that we'll interact for with this depending on whether or not we want to work with lines or individual characters. The write method only writes the characters that we specify, where the writelines method takes a list of strings that should all be on their own line. Let's add some names to our file, each on its own line, using both methods:

~/learning_python/using_files.py

my_file = open('xmen.txt', 'w+')
my_file.write('Beast\n')
my_file.write('Phoenix\n')
my_file.writelines([
    'Cyclops',
    'Bishop',
    'Nightcrawler',
])
Let's save the file, run it, and then check the contents of xmen.txt:

$ python3.7 using_files.py
$ cat xmen.txt
Beast
Phoenix
CyclopsBishopNightcrawler
$
This isn't quite what we expected. You would probably think that writelines would add the line ending, but the truth is that we still need to add the '\n' to the end of each item. The writelines method is more of a shorthand for multiple calls to write unless we used newline='\n' when we opened the file.

Another thing that we didn't do is close the file. When we're finished working with a file, we should call the close method. It's not necessary when running this script because the file handle will be closed when the program terminates. But when we're interacting with files, from within a server for instance, the program won't terminate for a long time.

Reading from a File
Now that we have some content in the file, let's close it within the script, and then re-open it for reading.

~/learning_python/using_files.py

my_file = open('xmen.txt', 'w+')
my_file.write('Beast\n')
my_file.write('Phoenix\n')
my_file.writelines([
    'Cyclops\n',
    'Bishop\n',
    'Nightcrawler\n',
])
my_file.close()

my_file = open('xmen.txt', 'r')
print(my_file.read())
my_file.close()
Now we can run the script again to see what happens:

$ python3.7 using_files.py
Beast
Phoenix
Cyclops
Bishop
Nightcrawler

$
Since we're reading the file in 'text' mode, we'll receive a single string from the read method that contains the newline characters and when printed it will print the newlines accordingly. If we didn't want this parsing to occur we could work with the file in bytes mode.

If we were to call the read method again we would receive an empty string in response. The reason for this is that the file holds onto a cursor for the location that it's currently at in the file and when we read it returns everything after that cursor position and moves the cursor to the end. To reread the existing content, we'll need to use seek to move earlier in the file.

The with Statement
Remembering to close a file that we open can be a little tedious and to get around this Python gives us the with statement. A with statement takes an object that has a close method and will call that method after the block has run.

Let's rewrite our existing code to utilize the with statement:

~/learning_python/using_files.py

with open('xmen.txt', 'w+') as my_file:
    my_file.write('Beast\n')
    my_file.write('Phoenix\n')
    my_file.writelines([
        'Cyclops\n',
        'Bishop\n',
        'Nightcrawler\n',
    ])

my_file = open('xmen.txt', 'r')
with my_file:
    print(my_file.read()) When we open the file to write, we're using the shorthand as expression to open the file 
within the with statement, and assigning it to the variable my_file within the block. This is a really handy tool if 
we don't need to use the file in any other way. An alternative would be to create the my_file variable manually, and 
then pass the variable into the with statement like we did when we were reading from the file.
