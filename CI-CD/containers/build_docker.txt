The next step in your CI/CD journey is to learn how to create a Dockerfile. Dockerfiles allow you to create your own Docker images to run applications. This lesson will discuss the basics of Dockerfiles and demonstrate how to dockerize the Train Schedule app.
After completing this lesson, you will have a basic understanding of how to build a Dockerfile that can be used to create a Docker image and run Docker containers.


For more information on Dockerfiles, check out the official Dockerfile reference: https://docs.docker.com/engine/reference/builder/


Here is the Train Schedule application source code that was forked for the demo: https://github.com/linuxacademy/cicd-pipeline-train-schedule-docker


Here are the contents of the Dockerfile that that was created in the demo:

FROM node:carbon
WORKDIR /usr/src/app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 8080
CMD ["npm", "start"]
H



It's great to know how to containerize applications, but what does it look like to run a container in production? This lesson will give you some insight into the basics of what running Docker containers in production can look like. This will provide you with the understanding necessary to automate the deployment of a dockerized app as part of a CD pipeline.


Installingh Docker on Jenkins


In order to deploy a containerized app, Jenkins needs to be able to interact with Docker. This means that Docker needs to be installed locally on the Jenkins server, and the Jenkins user needs to be provided with the permissions necessary to use that Docker installation. This lesson demonstrates how to install Docker on a Jenkins server and configure the Jenkins user to be able to access it.


Here are the commands used in the demo for this lesson:

sudo yum -y install docker
sudo systemctl start docker
sudo systemctl enable docker
sudo groupadd docker
sudo usermod -aG docker jenkins
sudo systemctl restart jenkins
sudo systemctl restart docker
